{"ast":null,"code":"'use strict';var utils=require('./../utils');function InterceptorManager(){this.handlers=[];}/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */InterceptorManager.prototype.use=function use(fulfilled,rejected,options){this.handlers.push({fulfilled:fulfilled,rejected:rejected,synchronous:options?options.synchronous:false,runWhen:options?options.runWhen:null});return this.handlers.length-1;};/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */InterceptorManager.prototype.eject=function eject(id){if(this.handlers[id]){this.handlers[id]=null;}};/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */InterceptorManager.prototype.forEach=function forEach(fn){utils.forEach(this.handlers,function forEachHandler(h){if(h!==null){fn(h);}});};module.exports=InterceptorManager;","map":{"version":3,"sources":["/Users/EthanTran/Desktop/Squid-Note/src/node_modules/axios/lib/core/InterceptorManager.js"],"names":["utils","require","InterceptorManager","handlers","prototype","use","fulfilled","rejected","options","push","synchronous","runWhen","length","eject","id","forEach","fn","forEachHandler","h","module","exports"],"mappings":"AAAA,aAEA,GAAIA,CAAAA,KAAK,CAAGC,OAAO,CAAC,YAAD,CAAnB,CAEA,QAASC,CAAAA,kBAAT,EAA8B,CAC5B,KAAKC,QAAL,CAAgB,EAAhB,CACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAD,kBAAkB,CAACE,SAAnB,CAA6BC,GAA7B,CAAmC,QAASA,CAAAA,GAAT,CAAaC,SAAb,CAAwBC,QAAxB,CAAkCC,OAAlC,CAA2C,CAC5E,KAAKL,QAAL,CAAcM,IAAd,CAAmB,CACjBH,SAAS,CAAEA,SADM,CAEjBC,QAAQ,CAAEA,QAFO,CAGjBG,WAAW,CAAEF,OAAO,CAAGA,OAAO,CAACE,WAAX,CAAyB,KAH5B,CAIjBC,OAAO,CAAEH,OAAO,CAAGA,OAAO,CAACG,OAAX,CAAqB,IAJpB,CAAnB,EAMA,MAAO,MAAKR,QAAL,CAAcS,MAAd,CAAuB,CAA9B,CACD,CARD,CAUA;AACA;AACA;AACA;AACA,GACAV,kBAAkB,CAACE,SAAnB,CAA6BS,KAA7B,CAAqC,QAASA,CAAAA,KAAT,CAAeC,EAAf,CAAmB,CACtD,GAAI,KAAKX,QAAL,CAAcW,EAAd,CAAJ,CAAuB,CACrB,KAAKX,QAAL,CAAcW,EAAd,EAAoB,IAApB,CACD,CACF,CAJD,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACAZ,kBAAkB,CAACE,SAAnB,CAA6BW,OAA7B,CAAuC,QAASA,CAAAA,OAAT,CAAiBC,EAAjB,CAAqB,CAC1DhB,KAAK,CAACe,OAAN,CAAc,KAAKZ,QAAnB,CAA6B,QAASc,CAAAA,cAAT,CAAwBC,CAAxB,CAA2B,CACtD,GAAIA,CAAC,GAAK,IAAV,CAAgB,CACdF,EAAE,CAACE,CAAD,CAAF,CACD,CACF,CAJD,EAKD,CAND,CAQAC,MAAM,CAACC,OAAP,CAAiBlB,kBAAjB","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n"]},"metadata":{},"sourceType":"module"}