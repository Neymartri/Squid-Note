{"ast":null,"code":"'use strict';var utils=require('./../utils');var transformData=require('./transformData');var isCancel=require('../cancel/isCancel');var defaults=require('../defaults');var Cancel=require('../cancel/Cancel');/**\n * Throws a `Cancel` if cancellation has been requested.\n */function throwIfCancellationRequested(config){if(config.cancelToken){config.cancelToken.throwIfRequested();}if(config.signal&&config.signal.aborted){throw new Cancel('canceled');}}/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */module.exports=function dispatchRequest(config){throwIfCancellationRequested(config);// Ensure headers exist\nconfig.headers=config.headers||{};// Transform request data\nconfig.data=transformData.call(config,config.data,config.headers,config.transformRequest);// Flatten headers\nconfig.headers=utils.merge(config.headers.common||{},config.headers[config.method]||{},config.headers);utils.forEach(['delete','get','head','post','put','patch','common'],function cleanHeaderConfig(method){delete config.headers[method];});var adapter=config.adapter||defaults.adapter;return adapter(config).then(function onAdapterResolution(response){throwIfCancellationRequested(config);// Transform response data\nresponse.data=transformData.call(config,response.data,response.headers,config.transformResponse);return response;},function onAdapterRejection(reason){if(!isCancel(reason)){throwIfCancellationRequested(config);// Transform response data\nif(reason&&reason.response){reason.response.data=transformData.call(config,reason.response.data,reason.response.headers,config.transformResponse);}}return Promise.reject(reason);});};","map":{"version":3,"sources":["/Users/EthanTran/Desktop/Squid-Note/src/node_modules/axios/lib/core/dispatchRequest.js"],"names":["utils","require","transformData","isCancel","defaults","Cancel","throwIfCancellationRequested","config","cancelToken","throwIfRequested","signal","aborted","module","exports","dispatchRequest","headers","data","call","transformRequest","merge","common","method","forEach","cleanHeaderConfig","adapter","then","onAdapterResolution","response","transformResponse","onAdapterRejection","reason","Promise","reject"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}